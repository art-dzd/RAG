"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞"""

import os
import asyncio
import re
from typing import List, Dict, Any, Optional

from aiogram import Router, F
from aiogram.types import Message, Document, ContentType
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import httpx

from app.config import settings
from app.utils.logging_config import get_logger
from app.utils.helpers import sanitize_filename, get_file_size_mb

logger = get_logger(__name__)

# –°–æ–∑–¥–∞—Ç—å —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()

# API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å FastAPI
API_BASE_URL = f"http://{settings.api_host}:{settings.api_port}"


def escape_markdown(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Markdown
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ Markdown
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    
    escaped_text = text
    for char in special_chars:
        escaped_text = escaped_text.replace(char, f'\\{char}')
    
    return escaped_text


class UserStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    waiting_for_document = State()
    chatting_with_document = State()


class APIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å FastAPI"""
    
    def __init__(self):
        self.base_url = API_BASE_URL
    
    async def create_user(self, user_data: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with httpx.AsyncClient(timeout=300.0) as client:
            # –î–æ–±–∞–≤–ª—è–µ–º user_id –≤ URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            user_id = user_data["telegram_id"]
            response = await client.post(f"{self.base_url}/users/?user_id={user_id}", json=user_data)
            response.raise_for_status()
            return response.json()
    
    async def upload_file(self, user_id: str, file_path: str) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"""
        async with httpx.AsyncClient(timeout=300.0) as client:
            with open(file_path, "rb") as f:
                files = {"file": f}
                data = {"user_id": user_id}
                logger.info(f"API –∑–∞–ø—Ä–æ—Å: {self.base_url}/upload/ —Å user_id={user_id}")
                response = await client.post(f"{self.base_url}/upload/", files=files, data=data)
                logger.info(f"API –æ—Ç–≤–µ—Ç: {response.status_code}")
                response.raise_for_status()
                return response.json()
    
    async def query_document(self, query_data: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É"""
        async with httpx.AsyncClient(timeout=300.0) as client:
            response = await client.post(f"{self.base_url}/query/", json=query_data)
            response.raise_for_status()
            return response.json()
    
    async def get_user_documents(self, user_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with httpx.AsyncClient(timeout=300.0) as client:
            response = await client.get(f"{self.base_url}/users/{user_id}/documents/")
            response.raise_for_status()
            return response.json()
    
    async def delete_document(self, user_id: str, document_id: str) -> Dict[str, Any]:
        """–£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with httpx.AsyncClient(timeout=300.0) as client:
            response = await client.delete(f"{self.base_url}/documents/{document_id}?user_id={user_id}")
            response.raise_for_status()
            return response.json()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π API –∫–ª–∏–µ–Ω—Ç
api_client = APIClient()

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_contexts: Dict[str, Dict[str, Any]] = {}


def get_user_context(user_id: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_contexts:
        user_contexts[user_id] = {
            "current_document_id": None,
            "chat_history": [],
            "documents": []
        }
    return user_contexts[user_id]


def add_to_chat_history(user_id: str, role: str, content: str):
    """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
    context = get_user_context(user_id)
    context["chat_history"].append({"role": role, "content": content})
    
    # –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π)
    if len(context["chat_history"]) > 10:
        context["chat_history"] = context["chat_history"][-10:]


@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_id = str(message.from_user.id)
        username = message.from_user.username
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥")
        
        # –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
        user_data = {
            "telegram_id": user_id,
            "username": username,
            "first_name": first_name,
            "last_name": last_name
        }
        
        result = await api_client.create_user(user_data)
        is_new = result.get("is_new", False)
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = f"""
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RAG-–±–æ—Ç–∞!**

{'–†–∞–¥ –≤–∏–¥–µ—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!' if is_new else '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!'}

**–ß—Ç–æ —è —É–º–µ—é:**
üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã (PDF, DOCX, TXT)
üí¨ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –≤–∞—à–∏—Ö —Ñ–∞–π–ª–æ–≤
üîç –ù–∞—Ö–æ–¥–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–æ–ª—å—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç (PDF, DOCX –∏–ª–∏ TXT —Ñ–∞–π–ª)
2. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
3. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É!

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–º–æ—â—å
/documents - –ú–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
/delete - –£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏:**
üìÑ /documents - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
üóëÔ∏è /delete - –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
üßπ /clear - –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üìé
        """
        
        await message.answer(welcome_text, parse_mode="Markdown")
        await state.set_state(UserStates.waiting_for_document)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="Markdown"
        )


@router.message(Command("help"))
async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üÜò **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é RAG-–±–æ—Ç–∞**

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤:**
‚Ä¢ PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã
‚Ä¢ DOCX –¥–æ–∫—É–º–µ–Ω—Ç—ã (Word)
‚Ä¢ TXT —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã

**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 50 –ú–ë
‚Ä¢ –§–∞–π–ª—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ
‚Ä¢ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
1. –í—ã –∑–∞–≥—Ä—É–∂–∞–µ—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç
2. –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ —Å–æ–∑–¥–∞—ë—Ç –∏–Ω–¥–µ–∫—Å
3. –ù–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞
4. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/documents - –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
/delete - –£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏:**
üìÑ /documents - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
üóëÔ∏è /delete - –í—ã–±–æ—Ä –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
üßπ /clear - –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ (–¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è)

**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–û —á—ë–º —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç?"
‚Ä¢ "–ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã?"
‚Ä¢ "–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ [—Ç–µ–º–∞]"
‚Ä¢ "–ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—Å—è –ø—Ä–æ [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å]?"

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏ –Ω–∞—á–∏–Ω–∞–π—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã! üöÄ
    """
    
    await message.answer(help_text, parse_mode="Markdown")


@router.message(Command("documents"))
async def documents_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /documents"""
    try:
        user_id = str(message.from_user.id)
        
        # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ API
        result = await api_client.get_user_documents(user_id)
        documents = result.get("documents", [])
        
        if not documents:
            await message.answer(
                "üìÅ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç (PDF, DOCX –∏–ª–∏ TXT), —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!",
                parse_mode="Markdown"
            )
            return
        
        # –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        docs_text = "üìö **–í–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã:**\n\n"
        
        for i, doc in enumerate(documents, 1):
            status = "‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω" if doc["is_processed"] else "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"
            # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            safe_filename = escape_markdown(doc['filename'])
            docs_text += (
                f"{i}. **{safe_filename}**\n"
                f"   üìä –¢–∏–ø: {doc['file_type'].upper()}\n"
                f"   üìè –†–∞–∑–º–µ—Ä: {doc['file_size_mb']:.2f} –ú–ë\n"
                f"   üß© –ß–∞—Å—Ç–µ–π: {doc['chunks_count']}\n"
                f"   üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {doc['uploaded_at'][:10]}\n"
                f"   {status}\n\n"
            )
        
        docs_text += f"**–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:** {len(documents)}\n\n"
        docs_text += "üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É!"
        
        await message.answer(docs_text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ documents_command: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="Markdown"
        )


@router.message(Command("clear"))
async def clear_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear - –æ—á–∏—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
    user_id = str(message.from_user.id)
    
    # –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context = get_user_context(user_id)
    context["chat_history"] = []
    
    await message.answer(
        "üßπ **–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞!**\n\n"
        "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω–∞, –Ω–æ –≤–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Å—Ç–∞–ª–∏—Å—å.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /documents –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delete –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
        parse_mode="Markdown"
    )


@router.message(Command("delete"))
async def delete_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    try:
        user_id = str(message.from_user.id)
        
        # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ API
        result = await api_client.get_user_documents(user_id)
        documents = result.get("documents", [])
        
        if not documents:
            await message.answer(
                "üìÅ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç (PDF, DOCX –∏–ª–∏ TXT)!",
                parse_mode="Markdown"
            )
            return
        
        # –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è
        docs_text = "üóëÔ∏è **–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:**\n\n"
        
        for i, doc in enumerate(documents, 1):
            status = "‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω" if doc["is_processed"] else "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"
            # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            safe_filename = escape_markdown(doc['filename'])
            docs_text += (
                f"{i}. **{safe_filename}**\n"
                f"   üìä –¢–∏–ø: {doc['file_type'].upper()}\n"
                f"   üìè –†–∞–∑–º–µ—Ä: {doc['file_size_mb']:.2f} –ú–ë\n"
                f"   üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {doc['uploaded_at'][:10]}\n"
                f"   {status}\n\n"
            )
        
        docs_text += (
            f"**–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:** {len(documents)}\n\n"
            "üí° **–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä**\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `1` –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n\n"
            "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!"
        )
        
        await message.answer(docs_text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ delete_command: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="Markdown"
        )


@router.message(F.text.regexp(r'^\d+$'))
async def handle_document_number(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    try:
        user_id = str(message.from_user.id)
        document_number = int(message.text)
        
        # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        result = await api_client.get_user_documents(user_id)
        documents = result.get("documents", [])
        
        if not documents:
            await message.answer(
                "üìÅ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                parse_mode="Markdown"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞
        if document_number < 1 or document_number > len(documents):
            await message.answer(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞.\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: –æ—Ç 1 –¥–æ {len(documents)}\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ /delete –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                parse_mode="Markdown"
            )
            return
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        selected_doc = documents[document_number - 1]
        document_id = selected_doc["id"]
        safe_filename = escape_markdown(selected_doc["filename"])
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        confirm_text = (
            f"üóëÔ∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
            f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: **{safe_filename}**\n"
            f"üìä –¢–∏–ø: {selected_doc['file_type'].upper()}\n"
            f"üìè –†–∞–∑–º–µ—Ä: {selected_doc['file_size_mb']:.2f} –ú–ë\n"
            f"üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {selected_doc['uploaded_at'][:10]}\n\n"
            f"‚ö†Ô∏è **–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!**\n\n"
            f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: `–¥–∞`\n"
            f"–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: `–Ω–µ—Ç`"
        )
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context = get_user_context(user_id)
        context["pending_delete"] = {
            "document_id": document_id,
            "filename": selected_doc["filename"]
        }
        
        await message.answer(confirm_text, parse_mode="Markdown")
        
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /delete –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_document_number: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="Markdown"
        )


@router.message(F.text.lower().in_(["–¥–∞", "yes", "—É–¥–∞–ª–∏—Ç—å", "delete"]))
async def confirm_delete(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        user_id = str(message.from_user.id)
        context = get_user_context(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–µ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        pending_delete = context.get("pending_delete")
        if not pending_delete:
            await message.answer(
                "‚ùå –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /delete –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                parse_mode="Markdown"
            )
            return
        
        document_id = pending_delete["document_id"]
        filename = pending_delete["filename"]
        safe_filename = escape_markdown(filename)
        
        # –£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ API
        try:
            result = await api_client.delete_document(user_id, document_id)
            
            # –û—á–∏—Å—Ç–∏—Ç—å –æ–∂–∏–¥–∞—é—â–µ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            context.pop("pending_delete", None)
            
            # –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –±—ã–ª —Ç–µ–∫—É—â–∏–º, –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if context.get("current_document_id") == document_id:
                context["current_document_id"] = None
                context["chat_history"] = []
            
            await message.answer(
                f"‚úÖ **–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!**\n\n"
                f"üìÑ –§–∞–π–ª: **{safe_filename}**\n"
                f"üóëÔ∏è –£–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞\n\n"
                f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /documents –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n{str(e)}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_delete: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="Markdown"
        )


@router.message(F.text.lower().in_(["–Ω–µ—Ç", "no", "–æ—Ç–º–µ–Ω–∞", "cancel"]))
async def cancel_delete(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    user_id = str(message.from_user.id)
    context = get_user_context(user_id)
    
    # –û—á–∏—Å—Ç–∏—Ç—å –æ–∂–∏–¥–∞—é—â–µ–µ —É–¥–∞–ª–µ–Ω–∏–µ
    context.pop("pending_delete", None)
    
    await message.answer(
        "‚ùå **–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n\n"
        "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –±—ã–ª —É–¥–∞–ª—ë–Ω.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /documents –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delete –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
        parse_mode="Markdown"
    )


@router.message(F.document)
async def handle_document(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        user_id = str(message.from_user.id)
        document: Document = message.document
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç {document.file_name} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞
        if not document.file_name:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞.")
            return
        
        file_extension = document.file_name.split('.')[-1].lower()
        if file_extension not in settings.allowed_file_types:
            await message.answer(
                f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file_extension}\n\n"
                f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(settings.allowed_file_types).upper()}",
                parse_mode="Markdown"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size_mb = document.file_size / (1024 * 1024)
        if file_size_mb > settings.max_file_size_mb:
            await message.answer(
                f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size_mb:.2f} –ú–ë\n\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {settings.max_file_size_mb} –ú–ë",
                parse_mode="Markdown"
            )
            return
        
        # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        safe_filename = escape_markdown(document.file_name)
        
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_message = await message.answer(
            f"‚è≥ **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç:** {safe_filename}\n\n"
            f"üìä –†–∞–∑–º–µ—Ä: {file_size_mb:.2f} –ú–ë\n"
            f"üîÑ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...",
            parse_mode="Markdown"
        )
        
        try:
            # –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
            file_info = await message.bot.get_file(document.file_id)
            file_content = await message.bot.download_file(file_info.file_path)
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ
            temp_dir = f"./data/user_files/{user_id}/temp"
            os.makedirs(temp_dir, exist_ok=True)
            
            safe_filename_for_path = sanitize_filename(document.file_name)
            temp_file_path = os.path.join(temp_dir, safe_filename_for_path)
            
            with open(temp_file_path, "wb") as f:
                f.write(file_content.read())
            
            # –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ API
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ {temp_file_path} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            result = await api_client.upload_file(user_id, temp_file_path)
            
            # –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(temp_file_path)
            
            if result["success"]:
                # –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                context = get_user_context(user_id)
                context["current_document_id"] = result["document_id"]
                context["chat_history"] = []  # –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                
                # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ñ–∞–π–ª–∞
                success_text = (
                    f"‚úÖ **–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!**\n\n"
                    f"üìÑ –§–∞–π–ª: {safe_filename}\n"
                    f"üß© –°–æ–∑–¥–∞–Ω–æ —á–∞—Å—Ç–µ–π: {result['chunks_count']}\n"
                    f"‚è± –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['processing_time_seconds']:.1f} —Å–µ–∫\n\n"
                    f"üí¨ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç–∞!"
                )
                
                await processing_message.edit_text(success_text, parse_mode="Markdown")
                await state.set_state(UserStates.chatting_with_document)
                
            else:
                await processing_message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                    parse_mode="Markdown"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            await processing_message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n{str(e)}",
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_document: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="Markdown"
        )


@router.message(F.text)
async def handle_text_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_id = str(message.from_user.id)
        user_text = message.text
        
        context = get_user_context(user_id)
        current_document_id = context.get("current_document_id")
        
        if not current_document_id:
            await message.answer(
                "üìÑ **–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç!**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (PDF, DOCX –∏–ª–∏ TXT), —á—Ç–æ–±—ã —è –º–æ–≥ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.",
                parse_mode="Markdown"
            )
            return
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        await message.bot.send_chat_action(message.chat.id, "typing")
        
        # –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        add_to_chat_history(user_id, "user", user_text)
        
        try:
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ API
            query_data = {
                "user_id": user_id,
                "document_id": current_document_id,
                "query": user_text,
                "chat_history": context["chat_history"][:-1]  # –ò—Å–∫–ª—é—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
            }
            
            result = await api_client.query_document(query_data)
            
            if result["success"]:
                answer = result["answer"]
                found_chunks = result["found_chunks"]
                
                # –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
                add_to_chat_history(user_id, "assistant", answer)
                
                # –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç
                response_text = f"ü§ñ **–û—Ç–≤–µ—Ç:**\n\n{answer}\n\n"
                
                if found_chunks > 0:
                    response_text += f"üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞—Å—Ç–µ–π: {found_chunks}"
                
                await message.answer(response_text, parse_mode="Markdown")
                
            else:
                error_message = result.get("error", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
                await message.answer(
                    f"‚ùå {error_message}\n\n"
                    "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–π –¥–æ–∫—É–º–µ–Ω—Ç.",
                    parse_mode="Markdown"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_text_message: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="Markdown"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@router.message()
async def handle_unsupported_content(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    await message.answer(
        "‚ùå **–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è**\n\n"
        "–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å:\n"
        "üìÑ –î–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ (PDF, DOCX, TXT)\n"
        "üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å!",
        parse_mode="Markdown"
    ) 