#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π RAG Telegram Bot —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import os
import sys
import json
import tempfile
from pathlib import Path

# –î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

import httpx
from app.config import settings
from app.utils.logging_config import setup_logging, get_logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
setup_logging("INFO", "./logs/test.log")
logger = get_logger(__name__)


class SystemTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.api_base = f"http://{settings.api_host}:{settings.api_port}"
        self.test_user_id = "test_user_123"
        self.client = httpx.AsyncClient(timeout=60.0)
        
    async def test_api_health(self):
        """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è API"""
        try:
            logger.info("üè• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...")
            response = await self.client.get(f"{self.api_base}/health")
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"‚úÖ Health check –ø—Ä–æ–π–¥–µ–Ω: {data['status']}")
                return True
            else:
                logger.error(f"‚ùå Health check –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ health check: {e}")
            return False
    
    async def test_root_endpoint(self):
        """–¢–µ—Å—Ç –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
        try:
            logger.info("üè† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞...")
            response = await self.client.get(f"{self.api_base}/")
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"‚úÖ –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: {data['message']}")
                return True
            else:
                logger.error(f"‚ùå –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: {e}")
            return False
    
    async def test_user_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            logger.info("üë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            
            user_data = {
                "telegram_id": self.test_user_id,
                "username": "test_user",
                "first_name": "Test",
                "last_name": "User"
            }
            
            response = await self.client.post(f"{self.api_base}/users/", json=user_data)
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ID {data['id']}")
                return True, data
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response.status_code}")
                return False, None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False, None
    
    async def test_document_upload(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            logger.info("üìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
            
            # –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            test_content = """
            –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è RAG —Å–∏—Å—Ç–µ–º—ã
            
            –≠—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã.
            –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ø–æ—Å–æ–±–Ω–∞ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —ç—Ç–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É.
            
            –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
            1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            2. –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
            3. –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤
            
            –¢–µ—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
            - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: RAG Telegram Bot
            - –í–µ—Ä—Å–∏—è: 1.0.0
            - –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: AI Assistant
            """
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False, encoding='utf-8') as f:
                f.write(test_content)
                temp_file_path = f.name
            
            try:
                # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
                with open(temp_file_path, 'rb') as f:
                    files = {"file": ("test_document.txt", f, "text/plain")}
                    data = {"user_id": self.test_user_id}
                    
                    response = await self.client.post(
                        f"{self.api_base}/upload/", 
                        files=files, 
                        data=data
                    )
                
                if response.status_code == 200:
                    data = response.json()
                    logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: ID {data['document_id']}, —á–∞–Ω–∫–æ–≤: {data['chunks_count']}")
                    return True, data['document_id']
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {response.status_code} - {response.text}")
                    return False, None
                    
            finally:
                # –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(temp_file_path)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return False, None
    
    async def test_document_query(self, document_id):
        """–¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É"""
        try:
            logger.info("üí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É...")
            
            test_queries = [
                "–û —á—ë–º —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç?",
                "–ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ?",
                "–ö–∞–∫–∞—è –≤–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã?",
                "–ö—Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫?"
            ]
            
            successful_queries = 0
            
            for query in test_queries:
                query_data = {
                    "user_id": self.test_user_id,
                    "document_id": document_id,
                    "query": query,
                    "chat_history": []
                }
                
                response = await self.client.post(f"{self.api_base}/query/", json=query_data)
                
                if response.status_code == 200:
                    data = response.json()
                    if data['success']:
                        logger.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å '{query}' —É—Å–ø–µ—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ —á–∞–Ω–∫–æ–≤: {data['found_chunks']}")
                        logger.info(f"   –û—Ç–≤–µ—Ç: {data['answer'][:100]}...")
                        successful_queries += 1
                    else:
                        logger.warning(f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å '{query}' –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {data.get('error')}")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ '{query}': {response.status_code}")
            
            success_rate = successful_queries / len(test_queries)
            logger.info(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤: {successful_queries}/{len(test_queries)} ({success_rate*100:.1f}%)")
            
            return success_rate > 0.5  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –µ—Å–ª–∏ –±–æ–ª—å—à–µ 50% –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
            return False
    
    async def test_user_documents_list(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            logger.info("üìö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
            
            response = await self.client.get(f"{self.api_base}/users/{self.test_user_id}/documents/")
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"‚úÖ –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω: {data['total_documents']} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
            return False
    
    async def test_metrics(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫"""
        try:
            logger.info("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫...")
            
            response = await self.client.get(f"{self.api_base}/metrics")
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã:")
                logger.info(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {data['total_metrics']['users']}")
                logger.info(f"   –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {data['total_metrics']['documents']}")
                logger.info(f"   –°–æ–æ–±—â–µ–Ω–∏–π: {data['total_metrics']['messages']}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫: {e}")
            return False
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
        
        test_results = {}
        
        # –¢–µ—Å—Ç 1: Health check
        test_results['health'] = await self.test_api_health()
        
        # –¢–µ—Å—Ç 2: –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        test_results['root'] = await self.test_root_endpoint()
        
        # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_success, user_data = await self.test_user_creation()
        test_results['user_creation'] = user_success
        
        # –¢–µ—Å—Ç 4: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω)
        document_id = None
        if user_success:
            doc_success, document_id = await self.test_document_upload()
            test_results['document_upload'] = doc_success
            
            # –¢–µ—Å—Ç 5: –ó–∞–ø—Ä–æ—Å—ã –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω)
            if doc_success and document_id:
                test_results['document_query'] = await self.test_document_query(document_id)
            else:
                test_results['document_query'] = False
            
            # –¢–µ—Å—Ç 6: –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            test_results['documents_list'] = await self.test_user_documents_list()
        else:
            test_results['document_upload'] = False
            test_results['document_query'] = False
            test_results['documents_list'] = False
        
        # –¢–µ—Å—Ç 7: –ú–µ—Ç—Ä–∏–∫–∏
        test_results['metrics'] = await self.test_metrics()
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        await self.print_test_summary(test_results)
        
        return test_results
    
    async def print_test_summary(self, results):
        """–í—ã–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("\n" + "="*60)
        logger.info("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        logger.info("="*60)
        
        total_tests = len(results)
        passed_tests = sum(1 for result in results.values() if result)
        
        for test_name, result in results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
            logger.info(f"{test_name.upper().replace('_', ' ')}: {status}")
        
        logger.info("-"*60)
        logger.info(f"–í–°–ï–ì–û –¢–ï–°–¢–û–í: {total_tests}")
        logger.info(f"–ü–†–û–ô–î–ï–ù–û: {passed_tests}")
        logger.info(f"–ù–ï –ü–†–û–ô–î–ï–ù–û: {total_tests - passed_tests}")
        logger.info(f"–£–°–ü–ï–®–ù–û–°–¢–¨: {passed_tests/total_tests*100:.1f}%")
        
        if passed_tests == total_tests:
            logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        elif passed_tests >= total_tests * 0.8:
            logger.info("‚ö†Ô∏è –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û")
        else:
            logger.info("‚ùå –ú–ù–û–ì–û –¢–ï–°–¢–û–í –ù–ï –ü–†–û–ô–î–ï–ù–û")
        
        logger.info("="*60)
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        await self.client.aclose()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = SystemTester()
    
    try:
        # –ü–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å
        await asyncio.sleep(2)
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
        results = await tester.run_all_tests()
        
        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        total_tests = len(results)
        passed_tests = sum(1 for result in results.values() if result)
        
        if passed_tests == total_tests:
            return 0  # –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã
        elif passed_tests >= total_tests * 0.8:
            return 1  # –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ
        else:
            return 2  # –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫
            
    except KeyboardInterrupt:
        logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 3
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return 4
    finally:
        await tester.cleanup()


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)