"""–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ RAG Telegram Bot —Å–∏—Å—Ç–µ–º—ã"""

import asyncio
import signal
import sys
from typing import Optional
import uvicorn
from concurrent.futures import ThreadPoolExecutor

from app.config import settings
from app.utils.logging_config import setup_logging, get_logger
from app.telegram.bot import run_bot
from app.database.database import create_tables


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging(settings.log_level, settings.log_file)
logger = get_logger(__name__)


class RAGBotSystem:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Å–∏—Å—Ç–µ–º—ã RAG –±–æ—Ç–∞"""
    
    def __init__(self):
        self.fastapi_server = None
        self.bot_task = None
        self.executor = ThreadPoolExecutor(max_workers=2)
        self.shutdown_event = asyncio.Event()
        
        logger.info("RAG Bot —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    async def start_fastapi_server(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å FastAPI —Å–µ—Ä–≤–µ—Ä"""
        try:
            logger.info(f"–ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {settings.api_host}:{settings.api_port}")
            
            config = uvicorn.Config(
                "app.main:app",
                host=settings.api_host,
                port=settings.api_port,
                log_level=settings.log_level.lower(),
                reload=False,
                access_log=True
            )
            
            server = uvicorn.Server(config)
            await server.serve()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ FastAPI —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            raise
    
    async def start_telegram_bot(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å Telegram –±–æ—Ç–∞"""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞")
            await run_bot()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")
            raise
    
    async def initialize_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            create_tables()
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    async def start_system(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É"""
        try:
            logger.info("=== –ó–∞–ø—É—Å–∫ RAG Telegram Bot —Å–∏—Å—Ç–µ–º—ã ===")
            
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.initialize_database()
            
            # 2. –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è FastAPI –∏ Telegram –±–æ—Ç–∞
            fastapi_task = asyncio.create_task(
                self.start_fastapi_server(),
                name="FastAPI-Server"
            )
            
            bot_task = asyncio.create_task(
                self.start_telegram_bot(),
                name="Telegram-Bot"
            )
            
            self.fastapi_server = fastapi_task
            self.bot_task = bot_task
            
            logger.info("–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"FastAPI –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: http://{settings.api_host}:{settings.api_port}")
            logger.info("Telegram –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            
            # 3. –û–∂–∏–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–π –∏–∑ –∑–∞–¥–∞—á –∏–ª–∏ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            done, pending = await asyncio.wait(
                [fastapi_task, bot_task, asyncio.create_task(self.shutdown_event.wait())],
                return_when=asyncio.FIRST_COMPLETED
            )
            
            # –ï—Å–ª–∏ –æ–¥–Ω–∞ –∏–∑ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π
            for task in done:
                if task.get_name() != "Task-3" and task.exception():  # Task-3 —ç—Ç–æ shutdown_event
                    logger.error(f"–ó–∞–¥–∞—á–∞ {task.get_name()} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {task.exception()}")
                    await self.shutdown_system()
                    break
            
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
            await self.shutdown_system()
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            await self.shutdown_system()
            raise
    
    async def shutdown_system(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("–ù–∞—á–∞–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")
            
            # –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            self.shutdown_event.set()
            
            # –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á–∏
            tasks_to_cancel = []
            
            if self.fastapi_server and not self.fastapi_server.done():
                tasks_to_cancel.append(self.fastapi_server)
            
            if self.bot_task and not self.bot_task.done():
                tasks_to_cancel.append(self.bot_task)
            
            if tasks_to_cancel:
                logger.info(f"–û—Ç–º–µ–Ω–∞ {len(tasks_to_cancel)} –∑–∞–¥–∞—á...")
                
                for task in tasks_to_cancel:
                    task.cancel()
                
                # –û–∂–∏–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                try:
                    await asyncio.wait_for(
                        asyncio.gather(*tasks_to_cancel, return_exceptions=True),
                        timeout=10.0
                    )
                except asyncio.TimeoutError:
                    logger.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á")
            
            # –ó–∞–∫—Ä—ã—Ç—å executor
            self.executor.shutdown(wait=True)
            
            logger.info("–°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
    
    def setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        def signal_handler(signum, frame):
            logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
            asyncio.create_task(self.shutdown_system())
        
        # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Unix-—Å–∏—Å—Ç–µ–º
        if sys.platform != "win32":
            signal.signal(signal.SIGTERM, signal_handler)
            signal.signal(signal.SIGINT, signal_handler)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    system = RAGBotSystem()
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        system.setup_signal_handlers()
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
        await system.start_system()
        
    except KeyboardInterrupt:
        logger.info("–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0


def validate_configuration():
    """–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
    errors = []
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not settings.openai_api_key or settings.openai_api_key == "your_openai_api_key_here":
        errors.append("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    if not settings.telegram_bot_token or settings.telegram_bot_token == "your_telegram_bot_token_here":
        errors.append("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if settings.api_port < 1 or settings.api_port > 65535:
        errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç API: {settings.api_port}")
    
    if settings.max_file_size_mb <= 0:
        errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {settings.max_file_size_mb}")
    
    if errors:
        logger.error("–û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        for error in errors:
            logger.error(f"  - {error}")
        logger.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª–µ .env")
        return False
    
    return True


if __name__ == "__main__":
    print("ü§ñ RAG Telegram Bot System")
    print("=" * 50)
    
    # –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not validate_configuration():
        sys.exit(1)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print(f"üì° API —Å–µ—Ä–≤–µ—Ä: http://{settings.api_host}:{settings.api_port}")
    print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {settings.database_url}")
    print(f"üóÇ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î: {settings.chroma_db_path}")
    print(f"üìã –õ–æ–≥–∏: {settings.log_file}")
    print(f"üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {'–í–∫–ª—é—á—ë–Ω' if settings.debug else '–í—ã–∫–ª—é—á–µ–Ω'}")
    print("=" * 50)
    
    try:
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
        
    except KeyboardInterrupt:
        print("\nüëã –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 